@use 'sass:math';
@import 'settings';

@mixin vf-chip-colors($chip-type, $class-name) {
  %dark-version#{$chip-type} {
    --color-chip-value: #{$colors--dark-theme--text-default};
    --color-chip-lead: #{$colors--dark-theme--text-default};
    --color-chip-background: #{map-get($colors-dark-theme--tinted-backgrounds, #{$chip-type}, 'default')};
    --color-chip-background-hover: #{map-get($colors-dark-theme--tinted-backgrounds, #{$chip-type}, 'hover')};
    --color-chip-background-active: #{map-get($colors-dark-theme--tinted-backgrounds, #{$chip-type}, 'active')};
    --color-chip-border: #{map-get($colors-dark-theme--tinted-borders, #{$chip-type})};
  }
  %light-version#{$chip-type} {
    --color-chip-value: #{$colors--light-theme--text-default};
    --color-chip-lead: #{$colors--light-theme--text-default};
    --color-chip-background: #{map-get($colors-light-theme--tinted-backgrounds, #{$chip-type}, 'default')};
    --color-chip-background-hover: #{map-get($colors-light-theme--tinted-backgrounds, #{$chip-type}, 'hover')};
    --color-chip-background-active: #{map-get($colors-light-theme--tinted-backgrounds, #{$chip-type}, 'active')};
    --color-chip-border: #{map-get($colors-light-theme--tinted-borders, #{$chip-type})};
  }
  #{$class-name} {
    @if ($theme-default-p-chip == 'dark') {
      @extend %dark-version#{$chip-type};
    } @else {
      @extend %light-version#{$chip-type};
    }

    &.is-light {
      @extend %light-version#{$chip-type};
    }

    &.is-dark {
      @extend %dark-version#{$chip-type};
    }
  }
}

@mixin vf-p-chip {
  %vf-chip {
    @extend %small-text;
    @include vf-transition(#{background-color, border-color}, snap, out);
    @include vf-focus;

    align-items: baseline;

    background-color: var(--color-chip-background);
    border: $input-border-thickness solid var(--color-chip-border);
    border-radius: 1rem;
    display: inline-flex;
    margin: 0 $sph--small $input-margin-bottom 0;
    max-width: 100%;
    padding: calc($spv--x-small - $input-border-thickness) $sph--small; // account for border thickness using calc
    position: relative;
    user-select: none;
    vertical-align: calc($input-border-thickness - map-get($nudges, p));
    white-space: nowrap;

    .p-chip__value {
      @extend %small-text;
      color: var(--color-chip-value);
      font-weight: $font-weight-bold;
    }

    .p-chip__lead,
    .p-chip__lead + .p-chip__value::before {
      color: var(--color-chip-lead);
    }

    .p-chip__lead,
    .p-chip__value {
      display: inline;
      margin-bottom: 0;
      overflow: hidden;
      padding: 0;
      text-overflow: ellipsis;
      vertical-align: baseline;
    }

    .p-chip__lead {
      @extend %x-small-text;

      text-transform: uppercase;
    }

    .p-chip__lead + .p-chip__value::before {
      @extend %x-small-text;

      content: ': ';
    }

    .p-chip__dismiss {
      @extend %icon;
      // also includes button and close icon styles in the theming section

      align-self: center;
      background-size: map-get($icon-sizes, small);
      border-radius: 50%;
      flex: 0 0 auto;
      margin-left: $sph--x-small;
      @media (min-width: $breakpoint-x-large) {
        background-size: math.div(map-get($icon-sizes, small), $font-size-ratio--largescreen); //ensure no rounding happens as it positions the icon off center
      }
    }

    &.is-dense {
      padding: 0 $sph--small;
    }

    &.is-inline {
      margin: 0;
      vertical-align: baseline;
    }
  }

  /* stylelint-disable property-no-vendor-prefix, selector-max-type */

  span.p-chip,
  span.p-chip--positive,
  span.p-chip--caution,
  span.p-chip--negative,
  span.p-chip--information {
    @extend %vf-chip;
    .p-chip__dismiss {
      @include vf-button-pattern(
        $button-background-color: transparent,
        $button-border-color: transparent,
        $button-text-color: transparent,
        $button-hover-background-color: var(--color-chip-background-hover),
        $button-hover-border-color: transparent,
        $button-active-background-color: var(--color-chip-background-active),
        $button-active-border-color: transparent
      );

      position: relative;

      &::before {
        content: '';
        display: block;
        height: 1rem;
        left: 1px;
        -webkit-mask-size: 0.7rem;
        mask-size: 0.7rem;
        position: absolute;
        top: 1px;
        width: 1rem;
        @include vf-icon-close(var(--color-chip-lead));
      }
    }
  }

  button.p-chip,
  button.p-chip--positive,
  button.p-chip--caution,
  button.p-chip--negative,
  button.p-chip--information {
    @extend %vf-chip;
    &:hover {
      background-color: var(--color-chip-background-hover);
      border-color: var(--color-chip-border);
    }
    &[aria-pressed='true'],
    &.is-selected,
    &:active {
      background-color: var(--color-chip-background-active);
      border-color: var(--color-chip-border);
    }
  }

  /* stylelint-enable property-no-vendor-prefix, selector-max-type */

  @include vf-chip-colors('neutral', '.p-chip');
  @include vf-chip-colors('positive', '.p-chip--positive');
  @include vf-chip-colors('caution', '.p-chip--caution');
  @include vf-chip-colors('negative', '.p-chip--negative');
  @include vf-chip-colors('information', '.p-chip--information');
}

@mixin vf-chip-theme($chip-type: neutral, $is-interactive: false, $colors-chip-tinted-backgrounds, $colors-chip-tinted-borders, $color-chip-value, $color-chip-lead) {
  @if (not map-has-key($colors-chip-tinted-backgrounds, $chip-type)) {
    $chip-type: neutral;
  }

  $color-background: map-get($colors-chip-tinted-backgrounds, $chip-type, 'default');
  $color-background-hover: map-get($colors-chip-tinted-backgrounds, $chip-type, 'hover');
  $color-background-active: map-get($colors-chip-tinted-backgrounds, $chip-type, 'active');
  $color-border: map-get($colors-chip-tinted-borders, $chip-type);

  background-color: $color-background;
  border: $input-border-thickness solid $color-border;

  .p-chip__value {
    color: $color-chip-value;
  }
  .p-chip__lead,
  .p-chip__lead + .p-chip__value::before {
    color: $color-chip-lead;
  }

  @if ($is-interactive) {
    &:hover {
      background-color: $color-background-hover;
      border-color: $color-border;
    }
    &[aria-pressed='true'],
    &.is-selected,
    &:active {
      background-color: $color-background-active;
      border-color: $color-border;
    }
  } @else {
    .p-chip__dismiss {
      @include vf-icon-close($color-chip-lead);

      @include vf-button-pattern(
        $button-background-color: transparent,
        $button-border-color: transparent,
        $button-hover-background-color: $color-background-hover,
        $button-hover-border-color: transparent,
        $button-active-background-color: $color-background-active,
        $button-active-border-color: transparent
      );
    }
  }
}
